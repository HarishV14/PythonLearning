{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs44\lang9 Python\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0\fs28 Python is one of the top programming languages in the world, widely used in fields such \b as AI, machine learning, data science, and web development.\tab\b0\fs22\par
{\pntext\f1\'B7\tab}\fs28 Python is a versatile, \b high-level programming language \b0 that is widely \b supported across all major operating systems.\b0\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Installation python\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Step 1: Install VS Code\fs22\par
{\pntext\f1\'B7\tab}\fs28 Step 2: Download the Python Installer File\fs22\par
{\pntext\f1\'B7\tab}\fs28 Step 3: Run the Installer\fs22\par
{\pntext\f1\'B7\tab}\fs28 Step 4: Install Python\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Check on Add python.exe to PATH as it ensures Python is added to our system's PATH variable.(Recommended)\par
{\pntext\f1\'B7\tab}Click Install Now, as it will include all the necessary files needed later.\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Step 4: Verify your installation\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 In cmd ---> python --version\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 In Vs code\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Download python extension\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Run the python in terminal \b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 In particular path-> python filename.py\fs22\par
{\pntext\f1\'B7\tab}\fs28 In Linux->python3 filename.py\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python comment \b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Single line Comment  #\fs22\par
{\pntext\f1\'B7\tab}\fs28 Python there is no dedicated methods to write multiline comment\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python Variable\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Holds the data\fs22\par
{\pntext\f1\'B7\tab}\fs28 Python is a \b type-inferred language\b0 , so you don't have to explicitly define the variable type.\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Example: Assigning multiple values to multiple variables\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 a, b, c = 5, 3.2, 'Hello'\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 If we want to assign the same value to multiple variables at once, we can do this as:\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 site1 = site2  = 'programiz.com'\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Rules for naming Python Variable\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 Constant and variable names should have a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_). For example\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 Create a name that makes sense. For example, vowel makes more sense than v\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 If you want to create a variable name having two words, use underscore(_) to separate them\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 Python is case-sensitive. So num and Num are different variables. For example\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 Avoid using keywords like if, True, class, etc. as variable names\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 Python Literals\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b0\fs28 Literals are representations of fixed values in a program. They can be numbers, characters, or strings, etc. For example, 'Hello, World!', 12, 23.0, 'C', etc.\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 site_name = 'programiz.com'\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 In the above expression, site_name is a variable, and 'programiz.com' is a literal.\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b Python Numeric literal\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 Numeric Literals are immutable (unchangeable). Numeric literals can belong to 3 different numerical types: Integer, Float, and Complex\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 Integer Literals\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b0\fs28 Integer literals are numbers without decimal parts. It also consists of negative numbers. For example, 5, -11, 0, 12, etc.\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Floating-Point Literals\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b0\fs28 Floating-point literals are numbers that contain decimal parts.\par
{\pntext\f1\'B7\tab}Just like integers, floating-point numbers can also be both positive and negative. For example, 2.5, 6.76, 0.0, -9.45, etc.\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Complex Literals\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b0\fs28 Complex literals are numbers that represent complex numbers.\par
{\pntext\f1\'B7\tab}Here, numerals are in the form a + bj, where a is real and b is imaginary. For example, 6+9j, 2+3j\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Python String Literals\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\fs28 In Python, texts wrapped inside quotation marks are called string literals..\par
{\pntext\f1\'B7\tab}"This is a string"-------We can also use single quotes to create strings----'This is also a string.'\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Boolean Literal\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\fs28 There are two boolean literals: True and False.\par
{\pntext\f1\'B7\tab}For example    is_pass = True\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Character Literal\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\fs28 Character literals are unicode characters enclosed in a quote. For example,\par
{\pntext\f1\'B7\tab}some_character = 'S'\par
{\pntext\f1\'B7\tab}Here, S is a character literal assigned to some_character.\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Special Literal\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\fs28 Python contains one special literal None. We use it to specify a null variable. For example\par
{\pntext\f1\'B7\tab}value = None\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Collection Literal\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\fs28 Let's see examples of four different collection literals. List, Tuple, Dict, and Set literals.\par
{\pntext\f1\'B7\tab}\b # list literal\b0\par
{\pntext\f1\'B7\tab}fruits = ["apple", "mango", "orange"] \par
{\pntext\f1\'B7\tab}\b # tuple literal\b0\par
{\pntext\f1\'B7\tab}numbers = (1, 2, 3) \par
{\pntext\f1\'B7\tab}\b # dictionary literal\b0\par
{\pntext\f1\'B7\tab}alphabets = \{'a':'apple', 'b':'ball', 'c':'cat'\} \par
{\pntext\f1\'B7\tab}\b # set literal\b0\par
{\pntext\f1\'B7\tab}vowels = \{'a', 'e', 'i' , 'o', 'u'\} \fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python Type Conversion\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 In programming, type conversion is the process of converting data of one type to another. For example: converting int data to str.\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 There are two types of type conversion in Python.\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 Implicit Conversion - automatic type conversion\par
{\pntext\f1\'B7\tab}Explicit Conversion - manual type conversion\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Python Implicit Type Conversion\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 Python automatically converts one data type to another. This is known as implicit type conversion.\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 Example 1: Converting integer to float\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b0\fs28 integer_number = 123\par
{\pntext\f1\'B7\tab}float_number = 1.23\par
{\pntext\f1\'B7\tab}\b new_number = integer_number + float_number\par
{\pntext\f1\'B7\tab}\b0 # display new value and resulting data type\par
{\pntext\f1\'B7\tab}print("Value:",new_number)\par
{\pntext\f1\'B7\tab}print("Data Type:",type(new_number))  --->type checking\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Output \b0 Value: 124.23  Data Type: <class 'float'>\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 We get TypeError, if we try to add str and int. For example, '12' + 23. Python is not able to use Implicit Conversion in such conditions.\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Explicit Type Conversion\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 In Explicit Type Conversion, users convert the data type of an object to required data type.\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 We use the built-in functions like int(), float(), str(), etc to perform explicit type conversion.\par
{\pntext\f1\'B7\tab}This type of conversion is also called typecasting because the user casts (changes) the data type of the objects\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 num_string = int(num_string)\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Key Points\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 Implicit Type Conversion is automatically performed by the Python interpreter.\fs22\par
{\pntext\f1\'B7\tab}\fs28 Python avoids the loss of data in Implicit Type Conversion.\fs22\par
{\pntext\f1\'B7\tab}\fs28 In Type Casting, loss of data may occur as we enforce the object to a specific data type\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python Input/output\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 we can simply use the print() function to print output\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 print(object= separator= end= file= flush=)\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 object - value(s) to be printed\par
{\pntext\f1\'B7\tab}sep (optional) - allows us to separate multiple objects inside print().\par
{\pntext\f1\'B7\tab}end (optional) - allows us to add add specific values like new line "\\n", tab "\\t"\par
{\pntext\f1\'B7\tab}file (optional) - where the values are printed. It's default value is sys.stdout (screen)\par
{\pntext\f1\'B7\tab}flush (optional) - boolean specifying if the output is flushed or buffered. Default: False\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 # print with end whitespace\par
{\pntext\f1\'B7\tab}\b0 print('Good Morning!', end= ' ')\par
{\pntext\f1\'B7\tab}print('It is rainy today')\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 o/p Good Morning! It is rainy today\b0\fs22\par
{\pntext\f1\'B7\tab}\fs28 print('New Year', 2023, 'See you soon!', sep= '. ')\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 O/p New Year. 2023. See you soon!\tab\b0\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Concate print value\b0\fs22\par
{\pntext\f1\'B7\tab}\fs28 print('Programiz is ' + 'awesome.')\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Output formatting\b0\fs22\par
{\pntext\f1\'B7\tab}\fs28 x = 5\par
{\pntext\f1\'B7\tab}y = 10\par
{\pntext\f1\'B7\tab}print('The value of x is \{\} and y is \{\}'.format(x,y))\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Python Input\b0\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Syntax of input()\par
{\pntext\f1\'B7\tab}\b0 input(prompt)\fs22\par
{\pntext\f1\'B7\tab}\fs28 Default input will be string \fs22\par
{\pntext\f1\'B7\tab}\b\fs28 num = int(input('Enter a number: '))\b0\fs22\par
{\pntext\f1\'B7\tab}\fs28 Specify the paritcular value type\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python Operator\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Operators are special symbols that perform operations on variables and values. \fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Types of Python Operators\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Arithmetic Operators\par
{\pntext\f1\'B7\tab}Assignment Operators\par
{\pntext\f1\'B7\tab}Comparison Operators\par
{\pntext\f1\'B7\tab}Logical Operators\par
{\pntext\f1\'B7\tab}Bitwise Operators\par
{\pntext\f1\'B7\tab}Special Operators\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Arithmetic Operators\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 +,-,=,*,/,//-floor division 10//3, %->remainder,**->power\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Assignment Operators\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 =,+=,-=,*=,/=,%=,**=->exponent assignment\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Comparison Operators\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 ==,!=,>,<,>=,<=\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Logical Operators\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 and->True only if both the operands are True ->a and b\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 or->True if at least one of the operands is True-> a or b\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 not a ->True if the operand is False and vice-versa-> not a\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Bitwise operators\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 &\tab Bitwise AND\tab x & y = 0 (0000 0000)\par
{\pntext\f1\'B7\tab}|\tab Bitwise OR\tab             x | y = 14 (0000 1110)\par
{\pntext\f1\'B7\tab}~\tab Bitwise NOT  \tab ~x = -11 (1111 0101)\par
{\pntext\f1\'B7\tab}^\tab Bitwise XOR\tab              x ^ y = 14 (0000 1110)\par
{\pntext\f1\'B7\tab}>>\tab Bitwise right shift\tab  x >> 2 = 2 (0000 0010)\par
{\pntext\f1\'B7\tab}<<\tab Bitwise left shift\tab x 0010 1000)\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Special operators\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Identity operators\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b\fs28 is\tab\b0 True if the operands are identical (refer to the same object)\tab\b x is True\b0\par
{\pntext\f1\'B7\tab}\b is not\b0\tab True if the operands are not identical (do not refer to the same object)\tab\b x is not True\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 Membership operators\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b\fs28 in\tab\b0 True if value/variable is found in the sequence \b 5 in x\b0\par
{\pntext\f1\'B7\tab}\b not in\b0\tab True if value/variable is not found in the sequence \b 5 not in x\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python Flow Control\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 If...else Statement\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 if statement is a conditional statement. It is used to execute a block of code only when a specific condition is met\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Syntax\b0\par
{\pntext\f1\'B7\tab}if condition:\par
{\pntext\f1\'B7\tab}    # body of if statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Indentation in Python\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Python uses indentation to define a block of code, such as the body of an if statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Python if...else Statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 An if statement can have an optional else clause. The else statement executes if the condition in the if statement evaluates to False.\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 Syntax\b0\par
{\pntext\f1\'B7\tab}if condition:\par
{\pntext\f1\'B7\tab}    # body of if statement\par
{\pntext\f1\'B7\tab}else:\par
{\pntext\f1\'B7\tab}    # body of else statement\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 True \b0 - the body of if executes, and the body of else is skipped.\par
{\pntext\f1\'B7\tab}\b False \b0 - the body of else executes, and the body of if is skipped\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Python if\'85elif\'85else Statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 if we need to make a choice between more than two alternatives, we use the if...elif...else statement.\par
{\pntext\f1\'B7\tab}\b Syntax\b0\par
{\pntext\f1\'B7\tab}if condition1:\par
{\pntext\f1\'B7\tab}    # code block 1\par
{\pntext\f1\'B7\tab}elif condition2:\par
{\pntext\f1\'B7\tab}    # code block 2\par
{\pntext\f1\'B7\tab}else: \par
{\pntext\f1\'B7\tab}    # code block 3\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Python Nested if Statements\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 It is possible to include an if statement inside another if statement.\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Compact if statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 the if statement can be simplified into a single line\fs22\par
{\pntext\f1\'B7\tab}\fs28 if number > 0: print('Positive')\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Ternary operator\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 Python doesn't have a ternary operator. However, we can use if...else to work like a ternary operator in other languages.\fs22\par
{\pntext\f1\'B7\tab}\fs28 result = 'pass' if number >= 50 else 'fail'\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Logical operators to add multiple condition\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 If needed, we can use logical operators such as and and or to create complex conditions to work with an if statement.\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b\fs28 Python for loop\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 we use a for loop to iterate over sequences such as lists, strings, dictionaries, etc.\fs22\par
{\pntext\f1\'B7\tab}\b\fs28 Syntax\b0\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b\fs28 for val in sequence:\par
{\pntext\f1\'B7\tab}    # body of the loop\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 The for loop iterates over the elements of sequence in order. In each iteration, the body of the loop is executed.\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b\fs28 Indentation in Loop\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 we use indentation to define a block of code, such as the body of a loop\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 for Loop with Python range()\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 the range() function returns a sequence of numbers\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 range(4) returns a sequence of 0, 1, 2 ,and 3\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 # iterate from i = 0 to i = 3\par
{\pntext\f1\'B7\tab}for i in range(4):\par
{\pntext\f1\'B7\tab}    print(i)\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 loop with else clause\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 A for loop can have an optional else clause. This else clause executes after the iteration completes.\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 digits = [0, 1, 5]\par
{\pntext\f1\'B7\tab}for i in digits:\par
{\pntext\f1\'B7\tab}    print(i)\par
{\pntext\f1\'B7\tab}else:\par
{\pntext\f1\'B7\tab}    print("No items left.")\fs22\par
{\pntext\f1\'B7\tab}\fs28 o/p-\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 0\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 1\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 5\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 No item left\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Using for loop without accessing  items\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 languages = ['Swift', 'Python', 'Go']\par
{\pntext\f1\'B7\tab}# using _ for placeholder variable\par
{\pntext\f1\'B7\tab}for _ in languages:\par
{\pntext\f1\'B7\tab}    print('Hi')\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Nested for loop\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\fs28 # outer loop \par
{\pntext\f1\'B7\tab}for i in range(2):\par
{\pntext\f1\'B7\tab}    # inner loop\par
{\pntext\f1\'B7\tab}    for j in range(2): \par
{\pntext\f1\'B7\tab}        print(f"i = \{i\}, j = \{j\}")\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 Python While loop\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b0\fs28 we use a while loop to repeat a block of code until a certain condition is met.\b\fs22\par
{\pntext\f1\'B7\tab}\fs28 while Loop Syntax\b0\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1 while condition:\par
{\pntext\f1\'B7\tab}    # body of while loop\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 Infinite while Loop\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 If the condition of a while loop always evaluates to True, the loop runs continuously, forming an infinite while loop.\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\fs28 While loop with else clause\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1440\sa200\sl276\slmult1\b0\fs28 a while loop can have an optional else clause - that is executed once the loop condition is False. For example,\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1800\sa200\sl276\slmult1\b0\fs28 counter = 0\par
{\pntext\f1\'B7\tab}while counter  <  2:\par
{\pntext\f1\'B7\tab}    print('This is inside loop')\par
{\pntext\f1\'B7\tab}    counter = counter + 1\par
{\pntext\f1\'B7\tab}else:\par
{\pntext\f1\'B7\tab}    print('This is inside else block')\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 Python Break and Continue\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b0\fs28 break exits the loop entirely\b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 continue skips the current iteration and proceeds to the next one\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\fs28 Python pass statement\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li1080\sa200\sl276\slmult1\b0\fs28 pass statement is a placeholder that does nothing when executed. \b\fs22\par
{\pntext\f1\'B7\tab}\b0\fs28 for i in range(10):\par
{\pntext\f1\'B7\tab}    pass  # Placeholder for future loop implementation\b\fs22\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\par
}
 